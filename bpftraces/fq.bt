#!/usr/local/bin/bpftrace

#include <net/sock.h>
#include <net/tcp.h>

kprobe:fq_enqueue
{
	$skb = (struct sk_buff *)arg0;
	$sk = (struct sock *)$skb->sk;
	$skb_mstamp_ns = $skb->skb_mstamp_ns;
	printf("%lld fq_enqueue() 0x%llx 0x%llx %d %llu   %d\n",
		nsecs,
		$sk, $skb, cpu, $skb_mstamp_ns,
		$skb->len);
}

kretprobe:fq_enqueue
/retval/
{
	printf("%lld fq_enqueue() returns %d %d\n",
		   nsecs,
		   retval, cpu);
}

kretprobe:fq_dequeue
/retval/
{
	$skb = (struct sk_buff *)retval;
	$sk = (struct sock *)$skb->sk;
	$skb_mstamp_ns = $skb->skb_mstamp_ns;	
	printf("%lld fq_dequeue() 0x%llx 0x%llx %d %llu   %d %d\n",
		   nsecs,
		   $sk, $skb, cpu, $skb_mstamp_ns,
		   $skb->len, $skb->truesize);
}

//kretprobe:dequeue_skb
///retval/
//{
//	$skb = (struct sk_buff *)retval;
//	$sk = (struct sock *)$skb->sk;
//	printf("%lld dequeue_skb() 0x%llx 0x%llx %d\n",
//		   nsecs,
//		   $sk, $skb, cpu);
//}

kprobe:__ip_queue_xmit
{
	$sk = (struct sock *)arg0;
	$port = $sk->__sk_common.skc_num;

    if ($port != 22 && $port != 6443) {
        $skb = (struct sk_buff *)arg1;
        $cb = (struct tcp_skb_cb *)$skb->cb;
        $tcp_gso_segs = $cb->tcp_gso_segs;
        $skb_mstamp_ns = $skb->skb_mstamp_ns;

        printf("%lld __ip_queue_xmit() 0x%llx 0x%llx %d %d %llu %d\n",
            nsecs,
            arg0, arg1, $port, $tcp_gso_segs,
            $skb_mstamp_ns, cpu);
    }
}
