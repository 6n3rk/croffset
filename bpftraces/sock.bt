#!/usr/local/bin/bpftrace

#include <net/sock.h>
#include <net/inet_connection_sock.h>
#include <linux/win_minmax.h>
#include <net/tcp.h>

BEGIN
{
	@delivery_flag = false;
	@clean_rtx_flag = false;
}

kprobe:tcp_rack_detect_loss
{
	$sk = (struct sock *)arg0;
	$inet_csk = (struct inet_connection_sock *)$sk;
	$tp = (struct tcp_sock *)$sk;
	
	$minmax = $tp->rtt_min;
	$f_tcp_min_rtt = $minmax.s[0].v >> 2;
	$f_srtt_us = $tp->srtt_us >> 3;
	//$no_reo_wnd = $tp->sacked_out - $tp->reordering;

	printf("%lld tcp_rack_detect_loss() enter 0x%llx %d %d %d   %d %d %d\n",
		   nsecs,
		   $sk, $tp->reord_seen, $inet_csk->icsk_ca_state, $tp->sacked_out,
		   $tp->reordering, $f_tcp_min_rtt * $tp->rack.reo_wnd_steps, $f_srtt_us);
}

kretprobe:tcp_rack_detect_loss
{
	printf("%lld tcp_rack_detect_loss() exit\n",
		   nsecs);
}

kprobe:tcp_mark_skb_lost
{
	$sk = (struct sock *)arg0;
	$inet_csk = (struct inet_connection_sock *)$sk;
	$tp = (struct tcp_sock *)$sk;

	$port = $sk->__sk_common.skc_num;
	$skb = (struct sk_buff *)arg1;
	$cb = (struct tcp_skb_cb *)$skb->cb;
	$gso_segs = $cb->tcp_gso_segs;

	$minmax = $tp->rtt_min;
	$f_tcp_min_rtt = $minmax.s[0].v >> 2;
	$f_srtt_us = $tp->srtt_us >> 3;

	$tolerance = $tp->rack.rtt_us + $f_tcp_min_rtt * $tp->rack.reo_wnd_steps;
	$diff = $tp->tcp_mstamp - ($skb->skb_mstamp_ns / 1000);

	$len = $skb->len;
	
	printf("%lld tcp_mark_skb_lost() 0x%llx 0x%llx %d %d   %d %d %d %d   %d %d\n",
		   nsecs,
		   $sk, $skb, $port, $gso_segs,
		   $tolerance, $diff, $tp->rack.dsack_seen, $len,
		   $tp->rack.rtt_us, $f_srtt_us);
}

kprobe:tcp_check_dsack
{
	$sk = (struct sock *)arg0;
	$port = $sk->__sk_common.skc_num;
	$sp = (struct tcp_sack_block_wire *)arg2;
	$start_seq = $sp[0].start_seq;
	$end_seq = $sp[0].end_seq;
	@delivery_flag = true;

	$ack_skb = (struct sk_buff *)arg1;
	$mark = $ack_skb->mark;

	// For unknown reasons, arg0 cannot be replaced with $sk
	printf("%lld tcp_check_dsack() 0x%llx 0x%x 0x%x %x   %d\n",
		   nsecs,
		   arg0, $start_seq, $end_seq, $mark,
		   $port);
}

kretprobe:tcp_check_dsack
/retval/
{
	printf("%lld tcp_check_dsack() returns true\n",
		   nsecs);
}

kprobe:tcp_retransmit_skb
{
	$sk = (struct sock *)arg0;
	$skb = (struct sk_buff *)arg1;
	$segs = arg2;
	$cb = (struct tcp_skb_cb *)$skb->cb;
	$tcp_gso_segs = $cb->tcp_gso_segs;
	$tcp_gso_size = $cb->tcp_gso_size;

	// For unknown reasons, $cb->seq's LSB 2 bytes are corrupted
	// (by mss size, typically 1398 = 0x0576),
	// but $cb->end_seq works, so we derive $start_seq by $cb->end_seq - $len
	$end_seq = $cb->end_seq;
	$len = $skb->len;
	$start_seq = $end_seq - $len;

	printf("%lld tcp_retransmit_skb() 0x%llx 0x%llx 0x%x 0x%x   %d %d %d %d\n",
		   nsecs,
		   $sk, $skb, $start_seq, $end_seq,
		   $len, $segs, $tcp_gso_segs, $tcp_gso_size);
}

kretprobe:__tcp_retransmit_skb
/retval/
{
	printf("%lld __tcp_retransmit_skb() returns true\n",
		   nsecs);
}

kprobe:tcp_fastretrans_alert
{
	$sk = (struct sock *)arg0;
	$prior_snd_una = arg1;
	$num_dupack = arg2;
	printf("%lld tcp_fastretrans_alert() 0x%llx 0x%x %d\n",
		   nsecs,
		   $sk, $prior_snd_una, $num_dupack);
}

kprobe:tcp_clean_rtx_queue.constprop.0
/arg2 != arg3/
{
	$sk = (struct sock *)arg0;
	$skb = (struct sk_buff *)arg1;
	$prior_fack = arg2;
	$prior_snd_una = arg3;

	@clean_rtx_flag = true;
	printf("%lld tcp_clean_rtx_queue() 0x%llx 0x%llx 0x%x 0x%x\n",
		   nsecs,
		   $sk, $skb, $prior_fack, $prior_snd_una);
}

kprobe:tcp_sacktag_walk
/@delivery_flag/
{
	$skb = (struct sk_buff *)arg0;
	$sk = (struct sock *)arg1;
	$start_seq = arg4;
	$end_seq = arg5;

	printf("%lld tcp_sacktag_walk() 0x%llx 0x%llx 0x%x 0x%x\n",
		   nsecs,
		   $sk, $skb, $start_seq, $end_seq);
}

kprobe:tcp_shifted_skb
/@delivery_flag/
{
	$sk = (struct sock *)arg0;
	$skb = (struct sk_buff *)arg1;
	$prev = (struct sk_buff *)arg2;
	$shifted = arg5;

	$cb = (struct tcp_skb_cb *)$skb->cb;
	$start_seq = $cb->seq;
	$end_seq = $start_seq + $shifted;

	printf("%lld tcp_shifted_skb() 0x%llx 0x%llx 0x%llx %d   0x%x 0x%x\n",
		   nsecs,
		   $sk, $skb, $prev, $shifted,
		   $start_seq, $end_seq);
}

kprobe:tcp_check_sack_reordering
/@delivery_flag/
{
	$sk = (struct sock *)arg0;
	$low_seq = arg1;
	$ts = arg2;

	printf("%lld tcp_check_sack_reordering() 0x%llx 0x%x %d\n",
		   nsecs,
		   $sk, $low_seq, $ts);	
}

kprobe:tcp_rate_skb_delivered
/@delivery_flag || @clean_rtx_flag/
{
	$sk = (struct sock *)arg0;
	$skb = (struct sk_buff *)arg1;
	$cb = (struct tcp_skb_cb *)$skb->cb;
	$end_seq = $cb->end_seq;
	$len = $skb->len;
	$start_seq = $end_seq - $len;

	printf("%lld tcp_rate_skb_delivered() 0x%llx 0x%llx 0x%x 0x%x   %d\n",
		   nsecs,
		   $sk, $skb, $start_seq, $end_seq,
		   $len);
	@delivery_flag = false;
	@clean_rtx_flag = false;
}