#!/usr/local/bin/bpftrace

#include <net/sock.h>
#include <net/inet_connection_sock.h>
#include <linux/win_minmax.h>

kprobe:tcp_rack_detect_loss
{
	$sock = (struct sock *)arg0;
	$inet_csk = (struct inet_connection_sock *)$sock;
	$tp = (struct tcp_sock *)arg0;
	$minmax = $tp->rtt_min;
	$f_tcp_min_rtt = $minmax.s[0].v >> 2;
	$no_reo_wnd = $tp->sacked_out - $tp->reordering;
	printf("%lld tcp_rack_detect_loss() %d %d %d\n",
		   elapsed, $inet_csk->icsk_ca_state, $no_reo_wnd,
		   $f_tcp_min_rtt * $tp->rack.reo_wnd_steps);
}

kretprobe:tcp_rack_detect_loss
{
	printf("%lld tcp_rack_detect_loss() exit\n",
		   elapsed);
}

kprobe:tcp_rack_skb_timeout
{
	//$tp = (struct tcp_sock *) arg0;
	//$skb = (struct sk_buff *) arg1;
	//printf("%lld tcp_rack_skb_timeout() %d %d %d %d\n",
	//	   elapsed, $tp->rack.rtt_us, arg2, $tp->tcp_mstamp,
	//	   $skb->skb_mstamp_ns);

	printf("%lld tcp_rack_skb_timeout()\n",
		   elapsed);
}

kprobe:tcp_mark_skb_lost
{
	$sock = (struct sock *)arg0;
	$tp = (struct tcp_sock *)arg0;
	$inet_csk = (struct inet_connection_sock *)$sock;
	$port = $sock->__sk_common.skc_num;
	$sk_buff = (struct sk_buff *)arg1;
	$cbuff = (struct tcp_skb_cb *)$sk_buff->cb;
	$gso_segs = $cbuff->tcp_gso_segs;

	$diff = $tp->tcp_mstamp - ($sk_buff->skb_mstamp_ns / 1000);
	$minmax = $tp->rtt_min;
	$f_tcp_min_rtt = $minmax.s[0].v >> 2;
	$f_srtt_us = $tp->srtt_us >> 3;
	$tolerance = $tp->rack.rtt_us + $f_tcp_min_rtt * $tp->rack.reo_wnd_steps;

	printf("%lld tcp_mark_skb_lost() 0x%llx %d %d %d %d %d %d %d\n",
		   elapsed, arg0, $port, $gso_segs,
		   $tp->reord_seen, $tolerance, $diff, $tp->rack.dsack_seen,
		   $f_srtt_us);
}